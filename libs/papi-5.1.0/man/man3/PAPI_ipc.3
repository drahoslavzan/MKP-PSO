.TH "PAPI_ipc" 3 "Tue Jan 15 2013" "Version 5.1.0.2" "PAPI" \" -*- nroff -*-
.ad l
.nh
.SH NAME
PAPI_ipc \- 
.PP
Get instructions per cycle, real and processor time.  

.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
\fBC Interface:\fP
.RS 4
#include <\fBpapi.h\fP> 
.br
 int PAPI_ipc( float *rtime, float *ptime, long long *ins, float *ipc );
.RE
.PP
\fBParameters:\fP
.RS 4
\fI*rtime\fP total realtime since the first PAPI_flops() call 
.br
\fI*ptime\fP total process time since the first PAPI_flops() call 
.br
\fI*ins\fP total instructions since the first call 
.br
\fI*ipc\fP instructions per cycle achieved since the previous call
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIPAPI_EINVAL\fP The counters were already started by something other than: PAPI_ipc() 
.br
\fIPAPI_ENOEVNT\fP The total instructions or total cycles event does not exist. 
.br
\fIPAPI_ENOMEM\fP Insufficient memory to complete the operation.
.RE
.PP
The first call to PAPI_ipc() will initialize the PAPI High Level interface, set up the counters to monitor PAPI_TOT_INS and PAPI_TOT_CYC events and start the counters. Subsequent calls will read the counters and return total real time, total process time, total instructions since the start of the measurement and the instructions per cycle rate since latest call to PAPI_ipc(). A call to PAPI_stop_counters() will stop the counters from running and then calls such as PAPI_start_counters() can safely be used.
.PP
\fBSee also:\fP
.RS 4
PAPI_flops() PAPI_stop_counters() PAPI_set_opt() PAPI_flips() 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for PAPI from the source code.
